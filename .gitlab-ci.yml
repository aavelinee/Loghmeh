stages:
  - build
  - deliver
  - deploy

build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE_DOCKERHUB" .
  after_script:
    - docker save -o ${CI_PROJECT_NAME}.tar "$CI_REGISTRY_IMAGE_DOCKERHUB"
  artifacts:
    name: "docker-image-$CI_PROJECT_NAME"
    paths:
      - ${CI_PROJECT_NAME}.tar

deliver:
  image: docker:latest
  stage: deliver
  dependencies:
    - build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER_DOCKERHUB" -p "$CI_REGISTRY_PASSWORD_DOCKERHUB" $CI_REGISTRY_DOCKERHUB
    - docker load --input ${CI_PROJECT_NAME}.tar
#    - docker tag ${CI_PROJECT_NAME} "$CI_REGISTRY_IMAGE_DOCKERHUB"
  script:
    - docker push "$CI_REGISTRY_IMAGE_DOCKERHUB"

deploy:
  tags:
    - loghmeh-runner
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  stage: deploy
  dependencies:
    - deliver
  script:
    - export PWD="/home/eileen/Documents/Univ^^/Sem8/IE/CAs/5"
    - export KUBECONFIG="${KUBECONFIG}:${PWD}/config.yaml"
    - kubectl config use-context baharan-aylin-ns
    - kubectl apply -f back-deployment.yml
    - kubectl expose deployment loghmeh-server --type NodePort --port 8080


# This file is a template, and might need editing before it works on your project.
# Official docker image.
#image: docker:latest
#
#services:
#  - docker:dind
#
#before_script:
#  - docker login -u "$CI_REGISTRY_USER_DOCKERHUB" -p "$CI_REGISTRY_PASSWORD_DOCKERHUB" $CI_REGISTRY_DOCKERHUB
#
#build-master:
#  stage: build
#  script:
#    - docker build --pull -t "$CI_REGISTRY_IMAGE_DOCKERHUB" .
#    - docker push "$CI_REGISTRY_IMAGE_DOCKERHUB"
#  only:
#    - master
#
#build:
#  stage: build
#  script:
#    - docker build --pull -t "$CI_REGISTRY_IMAGE_DOCKERHUB" .
#    - docker push "$CI_REGISTRY_IMAGE_DOCKERHUB"
#  except:
#    - master
